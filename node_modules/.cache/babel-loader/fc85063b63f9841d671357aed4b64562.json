{"ast":null,"code":"var _jsxFileName = \"/home/pi/alarm_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { ClockPicker } from '@mui/x-date-pickers/ClockPicker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isSending, setIsSending] = useState(false);\n  const [time, setDate] = useState(new Date());\n  const isMounted = useRef(true); // set isMounted to false when we unmount the component\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const sendRequest = useCallback(async () => {\n    // don't send again while we are sending\n    if (isSending) return; // update state\n\n    setIsSending(true); // send the actual request\n\n    await fetch('/alarmclock', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        time: time\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    }); // once the request is sent, update state again\n\n    if (isMounted.current) // only update if we are still mounted\n      setIsSending(false);\n  }, [isSending, time]); // update the callback if the state changes\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(LocalizationProvider, {\n      dateAdapter: AdapterDateFns,\n      children: /*#__PURE__*/_jsxDEV(ClockPicker, {\n        date: time,\n        onChange: newDate => setDate(newDate)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      disabled: isSending,\n      onClick: sendRequest,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"SQxCTLyVzKbHyEBubmaSt6BUjrM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","AdapterDateFns","LocalizationProvider","ClockPicker","App","isSending","setIsSending","time","setDate","Date","isMounted","current","sendRequest","fetch","method","headers","body","JSON","stringify","then","res","json","data","console","log","newDate"],"sources":["/home/pi/alarm_app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { ClockPicker } from '@mui/x-date-pickers/ClockPicker';\n\nfunction App() {\n  const [isSending, setIsSending] = useState(false)\n  const [time, setDate] = useState(new Date());\n  const isMounted = useRef(true)\n\n  // set isMounted to false when we unmount the component\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n\n  const sendRequest = useCallback(async () => {\n    // don't send again while we are sending\n    if (isSending) return\n    // update state\n    setIsSending(true)\n    // send the actual request\n    await fetch('/alarmclock', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({time: time})\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    });\n\n\n    // once the request is sent, update state again\n    if (isMounted.current) // only update if we are still mounted\n      setIsSending(false)\n  }, [isSending,time]) // update the callback if the state changes\n\n  return (\n    <>\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <ClockPicker date={time} onChange={(newDate) => setDate(newDate)} />\n    </LocalizationProvider>\n    <input type=\"button\" disabled={isSending} onClick={sendRequest}>Submit</input>\n    </>\n    \n  )\n}\n\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,MAAlD,QAAgE,OAAhE;AACA,SAASC,cAAT,QAA+B,oCAA/B;AACA,SAASC,oBAAT,QAAqC,0CAArC;AACA,SAASC,WAAT,QAA4B,iCAA5B;;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAIY,IAAJ,EAAD,CAAhC;EACA,MAAMC,SAAS,GAAGV,MAAM,CAAC,IAAD,CAAxB,CAHa,CAKb;;EACAF,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXY,SAAS,CAACC,OAAV,GAAoB,KAApB;IACD,CAFD;EAGD,CAJQ,EAIN,EAJM,CAAT;EAMA,MAAMC,WAAW,GAAGb,WAAW,CAAC,YAAY;IAC1C;IACA,IAAIM,SAAJ,EAAe,OAF2B,CAG1C;;IACAC,YAAY,CAAC,IAAD,CAAZ,CAJ0C,CAK1C;;IACA,MAAMO,KAAK,CAAC,aAAD,EAAgB;MACzBC,MAAM,EAAE,MADiB;MAEzBC,OAAO,EAAE;QACP,UAAU,kBADH;QAEP,gBAAgB;MAFT,CAFgB;MAMzBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAACX,IAAI,EAAEA;MAAP,CAAf;IANmB,CAAhB,CAAL,CAOHY,IAPG,CAOEC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPT,EAOqBF,IAPrB,CAO0BG,IAAI,IAAI;MACtCC,OAAO,CAACC,GAAR,CAAYF,IAAZ;IACD,CATK,CAAN,CAN0C,CAkB1C;;IACA,IAAIZ,SAAS,CAACC,OAAd,EAAuB;MACrBL,YAAY,CAAC,KAAD,CAAZ;EACH,CArB8B,EAqB5B,CAACD,SAAD,EAAWE,IAAX,CArB4B,CAA/B,CAZa,CAiCQ;;EAErB,oBACE;IAAA,wBACA,QAAC,oBAAD;MAAsB,WAAW,EAAEN,cAAnC;MAAA,uBACE,QAAC,WAAD;QAAa,IAAI,EAAEM,IAAnB;QAAyB,QAAQ,EAAGkB,OAAD,IAAajB,OAAO,CAACiB,OAAD;MAAvD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADA,eAIA;MAAO,IAAI,EAAC,QAAZ;MAAqB,QAAQ,EAAEpB,SAA/B;MAA0C,OAAO,EAAEO,WAAnD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJA;EAAA,gBADF;AASD;;GA5CQR,G;;KAAAA,G;AA+CT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}