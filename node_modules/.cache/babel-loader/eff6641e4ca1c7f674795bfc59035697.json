{"ast":null,"code":"import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { logger, isThenable } from '@sentry/utils';\n\nfunction isValidPrismaClient(possibleClient) {\n  return possibleClient && !!possibleClient['$use'];\n}\n/** Tracing integration for @prisma/client package */\n\n\nclass Prisma {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Prisma';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  __init() {\n    this.name = Prisma.id;\n  }\n  /**\n   * Prisma ORM Client Instance\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    ;\n\n    Prisma.prototype.__init.call(this);\n\n    if (isValidPrismaClient(options.client)) {\n      this._client = options.client;\n    } else {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`Unsupported Prisma client provided to PrismaIntegration. Provided client: ${JSON.stringify(options.client)}`);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setupOnce(_, getCurrentHub) {\n    if (!this._client) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('PrismaIntegration is missing a Prisma Client Instance');\n      return;\n    }\n\n    this._client.$use((params, next) => {\n      var scope = getCurrentHub().getScope();\n\n      var parentSpan = _optionalChain([scope, 'optionalAccess', _2 => _2.getSpan, 'call', _3 => _3()]);\n\n      var action = params.action;\n      var model = params.model;\n\n      var span = _optionalChain([parentSpan, 'optionalAccess', _4 => _4.startChild, 'call', _5 => _5({\n        description: model ? `${model} ${action}` : action,\n        op: 'db.prisma'\n      })]);\n\n      var rv = next(params);\n\n      if (isThenable(rv)) {\n        return rv.then(res => {\n          _optionalChain([span, 'optionalAccess', _6 => _6.finish, 'call', _7 => _7()]);\n\n          return res;\n        });\n      }\n\n      _optionalChain([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);\n\n      return rv;\n    });\n  }\n\n}\n\nPrisma.__initStatic();\n\nexport { Prisma }; //# sourceMappingURL=prisma.js.map","map":null,"metadata":{},"sourceType":"module"}