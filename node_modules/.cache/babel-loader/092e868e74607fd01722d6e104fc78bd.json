{"ast":null,"code":"import { isPlainObject, dateTimestampInSeconds, getGlobalSingleton, SyncPromise, logger, isThenable } from '@sentry/utils';\nimport { updateSession } from './session.js';\n/**\n * Absolute maximum number of breadcrumbs added to an event.\n * The `maxBreadcrumbs` option cannot be higher than this value.\n */\n\nvar MAX_BREADCRUMBS = 100;\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\n\nclass Scope {\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n\n  /** Transaction Name */\n\n  /** Span */\n\n  /** Session */\n\n  /** Request Mode Session Status */\n  constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n\n\n  static clone(scope) {\n    var newScope = new Scope();\n\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags\n      };\n      newScope._extra = { ...scope._extra\n      };\n      newScope._contexts = { ...scope._contexts\n      };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n      newScope._attachments = [...scope._attachments];\n    }\n\n    return newScope;\n  }\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n\n\n  addScopeListener(callback) {\n    this._scopeListeners.push(callback);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  addEventProcessor(callback) {\n    this._eventProcessors.push(callback);\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setUser(user) {\n    this._user = user || {};\n\n    if (this._session) {\n      updateSession(this._session, {\n        user\n      });\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  getUser() {\n    return this._user;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  getRequestSession() {\n    return this._requestSession;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setRequestSession(requestSession) {\n    this._requestSession = requestSession;\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setTags(tags) {\n    this._tags = { ...this._tags,\n      ...tags\n    };\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setTag(key, value) {\n    this._tags = { ...this._tags,\n      [key]: value\n    };\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setExtras(extras) {\n    this._extra = { ...this._extra,\n      ...extras\n    };\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setExtra(key, extra) {\n    this._extra = { ...this._extra,\n      [key]: extra\n    };\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setFingerprint(fingerprint) {\n    this._fingerprint = fingerprint;\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setLevel(level) {\n    this._level = level;\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setTransactionName(name) {\n    this._transactionName = name;\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setContext(key, context) {\n    if (context === null) {\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts,\n        [key]: context\n      };\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setSpan(span) {\n    this._span = span;\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  getSpan() {\n    return this._span;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  getTransaction() {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    var span = this.getSpan();\n    return span && span.transaction;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setSession(session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  getSession() {\n    return this._session;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  update(captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      var updatedScope = captureContext(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags,\n        ...captureContext._tags\n      };\n      this._extra = { ...this._extra,\n        ...captureContext._extra\n      };\n      this._contexts = { ...this._contexts,\n        ...captureContext._contexts\n      };\n\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      captureContext = captureContext;\n      this._tags = { ...this._tags,\n        ...captureContext.tags\n      };\n      this._extra = { ...this._extra,\n        ...captureContext.extra\n      };\n      this._contexts = { ...this._contexts,\n        ...captureContext.contexts\n      };\n\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  clear() {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n\n    this._notifyScopeListeners();\n\n    this._attachments = [];\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n    var maxCrumbs = typeof maxBreadcrumbs === 'number' ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS; // No data has been changed, so don't notify scope listeners\n\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    var mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  clearBreadcrumbs() {\n    this._breadcrumbs = [];\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  addAttachment(attachment) {\n    this._attachments.push(attachment);\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  getAttachments() {\n    return this._attachments;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  clearAttachments() {\n    this._attachments = [];\n    return this;\n  }\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional information about the original exception.\n   * @hidden\n   */\n\n\n  applyToEvent(event) {\n    let hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra,\n        ...event.extra\n      };\n    }\n\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags,\n        ...event.tags\n      };\n    }\n\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user,\n        ...event.user\n      };\n    }\n\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts,\n        ...event.contexts\n      };\n    }\n\n    if (this._level) {\n      event.level = this._level;\n    }\n\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    } // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n\n\n    if (this._span) {\n      event.contexts = {\n        trace: this._span.getTraceContext(),\n        ...event.contexts\n      };\n      var transactionName = this._span.transaction && this._span.transaction.name;\n\n      if (transactionName) {\n        event.tags = {\n          transaction: transactionName,\n          ...event.tags\n        };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n    event.sdkProcessingMetadata = { ...event.sdkProcessingMetadata,\n      ...this._sdkProcessingMetadata\n    };\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n\n\n  setSDKProcessingMetadata(newData) {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata,\n      ...newData\n    };\n    return this;\n  }\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n\n\n  _notifyEventProcessors(processors, event, hint) {\n    let index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    return new SyncPromise((resolve, reject) => {\n      var processor = processors[index];\n\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        var result = processor({ ...event\n        }, hint);\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && processor.id && result === null && logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n        if (isThenable(result)) {\n          void result.then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve)).then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n        }\n      }\n    });\n  }\n  /**\n   * This will be called on every set call.\n   */\n\n\n  _notifyScopeListeners() {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n\n      this._notifyingListeners = false;\n    }\n  }\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n\n\n  _applyFingerprint(event) {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : []; // If we have something on the scope, then merge it with event\n\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    } // If we have no data at all, remove empty array default\n\n\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n\n}\n/**\n * Returns the global event processors.\n */\n\n\nfunction getGlobalEventProcessors() {\n  return getGlobalSingleton('globalEventProcessors', () => []);\n}\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\n\n\nfunction addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}\n\nexport { Scope, addGlobalEventProcessor }; //# sourceMappingURL=scope.js.map","map":null,"metadata":{},"sourceType":"module"}