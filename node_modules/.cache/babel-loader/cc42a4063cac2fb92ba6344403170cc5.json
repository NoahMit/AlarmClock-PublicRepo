{"ast":null,"code":"import { _nullishCoalesce } from '@sentry/utils/esm/buildPolyfills';\nimport { uuid4, timestampWithMs, logger, dropUndefinedKeys } from '@sentry/utils';\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\n\nclass SpanRecorder {\n  __init() {\n    this.spans = [];\n  }\n\n  constructor() {\n    let maxlen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n    ;\n\n    SpanRecorder.prototype.__init.call(this);\n\n    this._maxlen = maxlen;\n  }\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n\n\n  add(span) {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n\n}\n/**\n * Span contains all data about a span\n */\n\n\nclass Span {\n  /**\n   * @inheritDoc\n   */\n  __init2() {\n    this.traceId = uuid4();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  __init3() {\n    this.spanId = uuid4().substring(16);\n  }\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * Internal keeper of the status\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * Timestamp in seconds when the span was created.\n   */\n\n\n  __init4() {\n    this.startTimestamp = timestampWithMs();\n  }\n  /**\n   * Timestamp in seconds when the span ended.\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n\n  __init5() {\n    this.tags = {};\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  __init6() {\n    this.data = {};\n  }\n  /**\n   * List of spans that were finalized\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n\n\n  constructor(spanContext) {\n    ;\n\n    Span.prototype.__init2.call(this);\n\n    Span.prototype.__init3.call(this);\n\n    Span.prototype.__init4.call(this);\n\n    Span.prototype.__init5.call(this);\n\n    Span.prototype.__init6.call(this);\n\n    if (!spanContext) {\n      return this;\n    }\n\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    } // We want to include booleans as well here\n\n\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  startChild(spanContext) {\n    var childSpan = new Span({ ...spanContext,\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId\n    });\n    childSpan.spanRecorder = this.spanRecorder;\n\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n\n    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && childSpan.transaction) {\n      var opStr = spanContext && spanContext.op || '< unknown op >';\n      var nameStr = childSpan.transaction.name || '< unknown name >';\n      var idStr = childSpan.transaction.spanId;\n      var logMessage = `[Tracing] Starting '${opStr}' span on transaction '${nameStr}' (${idStr}).`;\n      childSpan.transaction.metadata.spanMetadata[childSpan.spanId] = {\n        logMessage\n      };\n      logger.log(logMessage);\n    }\n\n    return childSpan;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setTag(key, value) {\n    this.tags = { ...this.tags,\n      [key]: value\n    };\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setData(key, value) {\n    this.data = { ...this.data,\n      [key]: value\n    };\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setStatus(value) {\n    this.status = value;\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setHttpStatus(httpStatus) {\n    this.setTag('http.status_code', String(httpStatus));\n    var spanStatus = spanStatusfromHttpCode(httpStatus);\n\n    if (spanStatus !== 'unknown_error') {\n      this.setStatus(spanStatus);\n    }\n\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  isSuccess() {\n    return this.status === 'ok';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  finish(endTimestamp) {\n    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && // Don't call this for transactions\n    this.transaction && this.transaction.spanId !== this.spanId) {\n      const {\n        logMessage\n      } = this.transaction.metadata.spanMetadata[this.spanId];\n\n      if (logMessage) {\n        logger.log(logMessage.replace('Starting', 'Finishing'));\n      }\n    }\n\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toTraceparent() {\n    let sampledString = '';\n\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n\n    return `${this.traceId}-${this.spanId}${sampledString}`;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toContext() {\n    return dropUndefinedKeys({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  updateWithContext(spanContext) {\n    this.data = _nullishCoalesce(spanContext.data, () => ({}));\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = _nullishCoalesce(spanContext.spanId, () => this.spanId);\n    this.startTimestamp = _nullishCoalesce(spanContext.startTimestamp, () => this.startTimestamp);\n    this.status = spanContext.status;\n    this.tags = _nullishCoalesce(spanContext.tags, () => ({}));\n    this.traceId = _nullishCoalesce(spanContext.traceId, () => this.traceId);\n    return this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  getTraceContext() {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId\n    });\n  }\n\n}\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n\n\nfunction spanStatusfromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n\n      case 403:\n        return 'permission_denied';\n\n      case 404:\n        return 'not_found';\n\n      case 409:\n        return 'already_exists';\n\n      case 413:\n        return 'failed_precondition';\n\n      case 429:\n        return 'resource_exhausted';\n\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n\n      case 503:\n        return 'unavailable';\n\n      case 504:\n        return 'deadline_exceeded';\n\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n\nexport { Span, SpanRecorder, spanStatusfromHttpCode }; //# sourceMappingURL=span.js.map","map":null,"metadata":{},"sourceType":"module"}