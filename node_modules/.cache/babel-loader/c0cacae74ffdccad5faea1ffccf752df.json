{"ast":null,"code":"var _jsxFileName = \"/home/pi/alarm_app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isSending, setIsSending] = useState(false);\n  const [value, setValue] = React.useState(null);\n  const isMounted = useRef(true); // set isMounted to false when we unmount the component\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const sendRequest = useCallback(async () => {\n    // don't send again while we are sending\n    if (isSending) return; // update state\n\n    setIsSending(true); // send the actual request\n\n    await fetch('/alarmclock', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        time: value\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    }); // once the request is sent, update state again\n\n    if (isMounted.current) // only update if we are still mounted\n      setIsSending(false);\n  }, [isSending, value]); // update the callback if the state changes\n\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    direction: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(LocalizationProvider, {\n      dateAdapter: AdapterDateFns,\n      children: /*#__PURE__*/_jsxDEV(TimePicker, {\n        label: \"Wake Up Time: \",\n        value: value,\n        onChange: newValue => {\n          setValue(newValue);\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        disabled: isSending,\n        onClick: sendRequest,\n        children: \"Contained\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2xFo/tCsnJp8JAMXU4UAHAOqUt8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","TextField","AdapterDateFns","LocalizationProvider","TimePicker","Button","Stack","App","isSending","setIsSending","value","setValue","isMounted","current","sendRequest","fetch","method","headers","body","JSON","stringify","time","then","res","json","data","console","log","newValue","params"],"sources":["/home/pi/alarm_app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\n\nfunction App() {\n  const [isSending, setIsSending] = useState(false)\n  const [value, setValue] = React.useState(null);\n  const isMounted = useRef(true)\n\n  // set isMounted to false when we unmount the component\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n\n  const sendRequest = useCallback(async () => {\n    // don't send again while we are sending\n    if (isSending) return\n    // update state\n    setIsSending(true)\n    // send the actual request\n    await fetch('/alarmclock', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({time: value})\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    });\n\n\n    // once the request is sent, update state again\n    if (isMounted.current) // only update if we are still mounted\n      setIsSending(false)\n  }, [isSending,value]) // update the callback if the state changes\n\n  return (\n    <Stack direction=\"row\">\n\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <TimePicker\n              label=\"Wake Up Time: \"\n              value={value}\n              onChange={(newValue) => {\n                setValue(newValue);\n              }}\n              renderInput={(params) => <TextField {...params} />}\n            />\n      </LocalizationProvider>\n\n      <Stack direction=\"row\">\n        <Button variant=\"contained\" disabled={isSending} onClick={sendRequest}>Contained</Button>\n      </Stack>\n\n    </Stack>\n    \n  )\n}\n\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,MAAlD,QAAgE,OAAhE;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,cAAT,QAA+B,oCAA/B;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBf,KAAK,CAACC,QAAN,CAAe,IAAf,CAA1B;EACA,MAAMe,SAAS,GAAGZ,MAAM,CAAC,IAAD,CAAxB,CAHa,CAKb;;EACAF,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXc,SAAS,CAACC,OAAV,GAAoB,KAApB;IACD,CAFD;EAGD,CAJQ,EAIN,EAJM,CAAT;EAMA,MAAMC,WAAW,GAAGf,WAAW,CAAC,YAAY;IAC1C;IACA,IAAIS,SAAJ,EAAe,OAF2B,CAG1C;;IACAC,YAAY,CAAC,IAAD,CAAZ,CAJ0C,CAK1C;;IACA,MAAMM,KAAK,CAAC,aAAD,EAAgB;MACzBC,MAAM,EAAE,MADiB;MAEzBC,OAAO,EAAE;QACP,UAAU,kBADH;QAEP,gBAAgB;MAFT,CAFgB;MAMzBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QAACC,IAAI,EAAEX;MAAP,CAAf;IANmB,CAAhB,CAAL,CAOHY,IAPG,CAOEC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPT,EAOqBF,IAPrB,CAO0BG,IAAI,IAAI;MACtCC,OAAO,CAACC,GAAR,CAAYF,IAAZ;IACD,CATK,CAAN,CAN0C,CAkB1C;;IACA,IAAIb,SAAS,CAACC,OAAd,EAAuB;MACrBJ,YAAY,CAAC,KAAD,CAAZ;EACH,CArB8B,EAqB5B,CAACD,SAAD,EAAWE,KAAX,CArB4B,CAA/B,CAZa,CAiCS;;EAEtB,oBACE,QAAC,KAAD;IAAO,SAAS,EAAC,KAAjB;IAAA,wBAEE,QAAC,oBAAD;MAAsB,WAAW,EAAER,cAAnC;MAAA,uBACM,QAAC,UAAD;QACE,KAAK,EAAC,gBADR;QAEE,KAAK,EAAEQ,KAFT;QAGE,QAAQ,EAAGkB,QAAD,IAAc;UACtBjB,QAAQ,CAACiB,QAAD,CAAR;QACD,CALH;QAME,WAAW,EAAGC,MAAD,iBAAY,QAAC,SAAD,OAAeA;QAAf;UAAA;UAAA;UAAA;QAAA;MAN3B;QAAA;QAAA;QAAA;MAAA;IADN;MAAA;MAAA;MAAA;IAAA,QAFF,eAaE,QAAC,KAAD;MAAO,SAAS,EAAC,KAAjB;MAAA,uBACE,QAAC,MAAD;QAAQ,OAAO,EAAC,WAAhB;QAA4B,QAAQ,EAAErB,SAAtC;QAAiD,OAAO,EAAEM,WAA1D;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAbF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD;;GAxDQP,G;;KAAAA,G;AA2DT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}