{"ast":null,"code":"import { getGlobalObject, getNumberOfUrlSegments, logger } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport React__default from 'react';\nvar _jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/reactrouterv6.tsx\";\nlet activeTransaction;\n\nlet _useEffect;\n\nlet _useLocation;\n\nlet _useNavigationType;\n\nlet _createRoutesFromChildren;\n\nlet _matchRoutes;\n\nlet _customStartTransaction;\n\nlet _startTransactionOnLocationChange;\n\nvar global = getGlobalObject();\nvar SENTRY_TAGS = {\n  'routing.instrumentation': 'react-router-v6'\n};\n\nfunction reactRouterV6Instrumentation(useEffect, useLocation, useNavigationType, createRoutesFromChildren, matchRoutes) {\n  return function (customStartTransaction) {\n    let startTransactionOnPageLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let startTransactionOnLocationChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var initPathName = global && global.location && global.location.pathname;\n\n    if (startTransactionOnPageLoad && initPathName) {\n      activeTransaction = customStartTransaction({\n        name: initPathName,\n        op: 'pageload',\n        tags: SENTRY_TAGS,\n        metadata: {\n          source: 'url'\n        }\n      });\n    }\n\n    _useEffect = useEffect;\n    _useLocation = useLocation;\n    _useNavigationType = useNavigationType;\n    _matchRoutes = matchRoutes;\n    _createRoutesFromChildren = createRoutesFromChildren;\n    _customStartTransaction = customStartTransaction;\n    _startTransactionOnLocationChange = startTransactionOnLocationChange;\n  };\n}\n\nfunction getNormalizedName(routes, location, matchRoutes) {\n  if (!routes || routes.length === 0 || !matchRoutes) {\n    return [location.pathname, 'url'];\n  }\n\n  var branches = matchRoutes(routes, location);\n  let pathBuilder = '';\n\n  if (branches) {\n    for (let x = 0; x < branches.length; x++) {\n      var branch = branches[x];\n      var route = branch.route;\n\n      if (route) {\n        // Early return if index route\n        if (route.index) {\n          return [branch.pathname, 'route'];\n        }\n\n        var path = route.path;\n\n        if (path) {\n          var newPath = path[0] === '/' ? path : `/${path}`;\n          pathBuilder += newPath;\n\n          if (branch.pathname === location.pathname) {\n            // If the route defined on the element is something like\n            // <Route path=\"/stores/:storeId/products/:productId\" element={<div>Product</div>} />\n            // We should check against the branch.pathname for the number of / seperators\n            if (getNumberOfUrlSegments(pathBuilder) !== getNumberOfUrlSegments(branch.pathname)) {\n              return [newPath, 'route'];\n            }\n\n            return [pathBuilder, 'route'];\n          }\n        }\n      }\n    }\n  }\n\n  return [location.pathname, 'url'];\n}\n\nfunction withSentryReactRouterV6Routing(Routes) {\n  if (!_useEffect || !_useLocation || !_useNavigationType || !_createRoutesFromChildren || !_matchRoutes || !_customStartTransaction) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('reactRouterV6Instrumentation was unable to wrap Routes because of one or more missing parameters.');\n    return Routes;\n  }\n\n  let isBaseLocation = false;\n  let routes;\n\n  var SentryRoutes = props => {\n    var location = _useLocation();\n\n    var navigationType = _useNavigationType();\n\n    _useEffect(() => {\n      // Performance concern:\n      // This is repeated when <Routes /> is rendered.\n      routes = _createRoutesFromChildren(props.children);\n      isBaseLocation = true;\n\n      if (activeTransaction) {\n        const [name, source] = getNormalizedName(routes, location, _matchRoutes);\n        activeTransaction.setName(name);\n        activeTransaction.setMetadata({\n          source\n        });\n      }\n    }, [props.children]);\n\n    _useEffect(() => {\n      if (isBaseLocation) {\n        if (activeTransaction) {\n          activeTransaction.finish();\n        }\n\n        return;\n      }\n\n      if (_startTransactionOnLocationChange && (navigationType === 'PUSH' || navigationType === 'POP')) {\n        if (activeTransaction) {\n          activeTransaction.finish();\n        }\n\n        const [name, source] = getNormalizedName(routes, location, _matchRoutes);\n        activeTransaction = _customStartTransaction({\n          name,\n          op: 'navigation',\n          tags: SENTRY_TAGS,\n          metadata: {\n            source\n          }\n        });\n      }\n    }, [props.children, location, navigationType, isBaseLocation]);\n\n    isBaseLocation = false; // @ts-ignore Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params\n\n    return React__default.createElement(Routes, { ...props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      }\n    });\n  };\n\n  hoistNonReactStatics(SentryRoutes, Routes); // @ts-ignore Setting more specific React Component typing for `R` generic above\n  // will break advanced type inference done by react router params\n\n  return SentryRoutes;\n}\n\nexport { reactRouterV6Instrumentation, withSentryReactRouterV6Routing }; //# sourceMappingURL=reactrouterv6.js.map","map":null,"metadata":{},"sourceType":"module"}