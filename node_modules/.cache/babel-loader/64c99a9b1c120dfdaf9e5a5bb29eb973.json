{"ast":null,"code":"import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\nvar global = getGlobalObject();\n/** HttpContext integration collects information about HTTP request headers */\n\nclass HttpContext {\n  constructor() {\n    HttpContext.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static __initStatic() {\n    this.id = 'HttpContext';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  __init() {\n    this.name = HttpContext.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  setupOnce() {\n    addGlobalEventProcessor(event => {\n      if (getCurrentHub().getIntegration(HttpContext)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        } // grab as much info as exists and add it to the event\n\n\n        var url = event.request && event.request.url || global.location && global.location.href;\n        const {\n          referrer\n        } = global.document || {};\n        const {\n          userAgent\n        } = global.navigator || {};\n        var headers = { ...(event.request && event.request.headers),\n          ...(referrer && {\n            Referer: referrer\n          }),\n          ...(userAgent && {\n            'User-Agent': userAgent\n          })\n        };\n        var request = { ...(url && {\n            url\n          }),\n          headers\n        };\n        return { ...event,\n          request\n        };\n      }\n\n      return event;\n    });\n  }\n\n}\n\nHttpContext.__initStatic();\n\nexport { HttpContext }; //# sourceMappingURL=httpcontext.js.map","map":null,"metadata":{},"sourceType":"module"}